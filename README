sparse - sparse file encoding, decoding and patching

Creating a sparse file:

# truncate -s 1M sparse.img
# echo "Hello World!" | dd of=sparse.img bs=1 seek=12345 conv=notrunc

Looking at its disk usage:

# du -h sparse.img
4.0K    sparse.img

Looking at its apparent size:

# du -h --apparent-size sparse.img
1.0M    sparse.img

Encoding a sparse file:

# sparse e sparse.img > encoded.dat
encoding sparse.img to stdout

Looking at its disk usage:

# du -h encoded.dat
8.0K    encoded.dat

Decoding a sparse file:

# sparse d decoded.img < encoded.dat
decoding stdin to decoded.img
truncating decoded.img to size 1048576

Looking at its disk usage:

# du -h decoded.img
4.0K    decoded.img

Patching a block device using an encoded sparse file:

# sparse p /dev/mmcblk0p4 < encoded.dat
decoding stdin and patching /dev/mmcblk0p4

Data layout of encoded sparse file:
big endian uint64_t: total byte count
big endian uint64_t: data start offset
big endian uint64_t: hole start offset
.. (hole start offset) - (data start offset) bytes ..
big endian uint64_t: data start offset
big endian uint64_t: hole start offset
.. (hole start offset) - (data start offset) bytes ..

and so on

